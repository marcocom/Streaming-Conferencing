package{	import flash.display.Stage;	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.MovieClip;		import flash.net.URLRequest;	import flash.events.Event;		import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.system.Security;	import flash.system.SecurityDomain;	import flash.system.Capabilities;		import flash.utils.getDefinitionByName;		import com.ws.*;	/**	 * The RSLLoader class is generic loader, we strongly recommend that you use it 	 * for loading your implementation main class (CohostSample in this example). 	 * This ensures that when you reference Ustream classes in your code, it will not throw 	 * a compile time error.	 */		public class RslLoader extends MovieClip	{		private var context:LoaderContext		private var path:String = "http://www.ustream.tv/flash/"		private var rsls:Array = ["viewer.rsl.swf", "broadcaster.rsl.swf"]		var channelId:String; // = unescape("5603%2Fch057");		var sessionId:String; // = "255842b39aa3d812060dbbdbe6bd345a";				public function RslLoader() 		{						//Stop the timeline - ChostSample class is referenced in frame 2 and we first 			//have to make sure that the RSL libraries are loaded			stop()			//Always make sure you already have a stage, otherwise bind an event listener			//Please remember that in the constructor you should not do anything			//other than checking for stage			if( loaderInfo.parameters.cid ){				trace( "[viewer] - Received channelId from flashvars: " + loaderInfo.parameters.cid )				channelId = loaderInfo.parameters.cid			} else {				channelId = unescape("5603%2Fch057");			}						if( loaderInfo.parameters.sid ) {				trace( "[broadcaster] - Received sessionId from flashvars: " + loaderInfo.parameters.sid )					sessionId = loaderInfo.parameters.sid			} else {				sessionId = "255842b39aa3d812060dbbdbe6bd345a";			}						//This is where your actual code begins			Security.allowDomain("*")			context = new LoaderContext(false, ApplicationDomain.currentDomain)			//For quicker testing during development, when you have a loca sandbox			//you may want to load RSLs from local filesystem, too.			if (Security.sandboxType == "localTrusted" && Capabilities.playerType == "External"){ 				path = "../swf/"			} else if(Security.sandboxType == "localTrusted" && Capabilities.playerType == "PlugIn"){				path = "swf/"			}			else { 				context.securityDomain = SecurityDomain.currentDomain			}									getRsl()		}				private function getRsl(...e):void		{			//We need to make sure that all RSLs are loaded			//and we load them one after the other			if ( rsls.length )			{				//Load the next RSL				var loader:Loader = new Loader()				loader.contentLoaderInfo.addEventListener( Event.COMPLETE, getRsl )				var asset:String = path + rsls.shift();				trace("LOAD:"+asset)				loader.load( new URLRequest( asset ), context )			}			else			{				trace("LOADING FINISHED");				//All RSLs are loaded - we can proceed to frame 2 now				gotoAndStop(2);				//Workaround to prevent compile time error. Dynamic class reference will				//instantiate a new CohostSample and put it on stage				//var mainClass:Class = getDefinitionByName('CohostSample') as Class				//addChild(new mainClass() as DisplayObject)				var mainClass:CohostSample = new CohostSample(channelId, sessionId);				addChild(mainClass)			}		}	}}