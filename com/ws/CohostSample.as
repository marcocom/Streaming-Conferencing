package com.ws{		import flash.display.*;	import flash.system.ApplicationDomain;	import fl.data.DataProvider;	import fl.controls.Label;	import flash.utils.getDefinitionByName;		import com.utils.gURL;	import com.yahoo.astra.fl.controls.treeClasses.*;			import tv.ustream.broadcaster.logic.Logic;	import tv.ustream.tools.Debug;	import tv.ustream.tools.DynamicEvent;		import flash.external.ExternalInterface;		import flash.events.Event;	import flash.events.TimerEvent;	import flash.events.MouseEvent;		import flash.net.URLVariables;	import flash.net.URLRequest;		import flash.utils.Timer;	public class CohostSample extends MovieClip	{				var broadcaster:Logic;						//var dynEventInst:Event = ApplicationDomain.currentDomain.getDefinitionByName("tv.ustream.tools.DynamicEvent") as Event;		//var dynEvent:dynEventInst = new dynEventInst();				var gURLObj:gURL;		//var gURLObj:gURL = new gURL(initBC, debug_txt);		//var md5Obj = new MD5(); 						////////////////////////////////////////////////////////		var cameraNames:DataProvider;		var microphoneNames:DataProvider;		var videoDisplay:DisplayObject;						//Sample brand/channel		var channelId:String;		var sessionId:String;						//var baseURL:String 		= "http://localhost/stageit_drupal/";		var baseURL:String 		= "http://staging.stageitbeta.com/";				//var authUrl:String = "http://stageitbeta.com/services/auth.php";		//var saveShowURL:String = "http://localhost/stageit_drupal/show_setup/saveSettings";		var saveShowURL:String = baseURL+"show_setup/saveSettings";		var endShowOverlayURL:String = baseURL+"sites/all/modules/assets/images/bc_endshow_overlay.png";				//init Timers		var askSec:Number = 14400;//4*60*60; 					//how often ask the user to continue session		var timeoutSecSave:Number = 10;		var timeoutSec:Number = 10;		//how long does the user have after they have been asked to continue, before broadcast stops		var timerCont:Timer;		var timerTimeout:Timer;		//init so it"s not null				var infoXML:XML = <main label="Root Node"><node label="connecting..." /></main>;		var advOptionOn:Boolean = false;						var coHostStage:Number = 0;					public function CohostSample(cid:String, sid:String) 		{			channelId = cid;			sessionId = sid;			//Always make sure you already have a stage, otherwise bind an event listener			//Please remember that in the constructor you should not do anything			//other than checking for stage						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}										private function onAddedToStage(e:Event)		{			trace("BROADCASTER ADDED cid:"+channelId+" sid:"+sessionId);			gURLObj = new gURL();			timerTimeout = new Timer(1);			ExternalInterface.addCallback("endShow", endShow);			initBC();		}				private function initBC()		{			broadcaster = new Logic(channelId, sessionId);			//When the publisher (audio/video sources) is ready we call autoStartBroadcast			broadcaster.addEventListener('createPublisher', autoStartBroadcast);			//When modules are ready we will check for specific modules of our interest			broadcaster.addEventListener('createModules', onCreateModules);						broadcaster.addEventListener( "sessionError", 		onSessionError, 	false, 0, true );			broadcaster.addEventListener( "rejected", 			onRejected, 		false, 0, true );						//broadcaster.addEventListener( "sessionError", 		onSessionError, 	true, 9, true )	;			broadcaster.addEventListener( "broadcasterMessage", onBroadcasterMessage, 	false, 0, true );			broadcaster.addEventListener( "alreadyOnline", 		onAlreadyOnline, 	false, 0, true );			broadcaster.addEventListener( "connectFailed", 		onConnectFailed, 	false, 0, true )	;						broadcaster.addEventListener( "connected", 			onConnected, 		false, 0, true );			broadcaster.addEventListener( "createPublisher", 	onCreatePublisher, 	false, 0, true );						broadcaster.addEventListener( "createModules", 	onCreateModules, 	false, 0, true );									videoDisplay = broadcaster.display;						videoDisplay.width = 480;			videoDisplay.height = 360;						videoDisplay.x = 0;			videoDisplay.y = 0;										addChild( videoDisplay );						//Info box			info_tree.dataProvider = new TreeDataProvider(infoXML);			info_tree.x = 0;			info_tree.y = 381;						//Advanced options			adv_options.addEventListener (MouseEvent.CLICK, onClickAdvOpts);						//Bind cohost button			cohost_btn.addEventListener(MouseEvent.CLICK, onClickCoHost);					}				//*******************************   Timer handlers  ***************************				private function timerHandler(e:TimerEvent) {			timerTimeout  = new Timer(1000);			timeoutSec = timeoutSecSave;			timerTimeout.addEventListener(TimerEvent.TIMER_COMPLETE, timerHandlerTimeout);			timerTimeout.start();								updateInfo("Are you still there?");			updateInfo("Please click \"Continue\"");		}				private function timerHandlerTimeout(e:TimerEvent) {			if(timeoutSec < 0 ) {				timerTimeout.stop();					timerCont.stop();				continue_btn.visible = false;								updateInfo("Idle...Stopping broadcast");								broadcast_btn.label 	= "Start broadcast";				broadcast_btn.selected 	= false;				broadcaster.publisher.stopBroadcast();							} else {				continue_btn.label = "Continue ("+(timeoutSec--)+")";				continue_btn.visible = true;			}		}										/////////////////////////////////////////////////////////////////////////		//////////////////// LOGIC Class handlers ///////////////////////////////		/////////////////////////////////////////////////////////////////////////				private function onConnected( e:Event ) {			trace( "[broadcaster] - onConnected() :: " );			//debug_txt.text += "connected \n";			updateInfo("connected");						//Switch to encoded stream, instead of local			broadcaster.publisher.remoteMonitorEnabled = true;			broadcaster.publisher.localMonitorEnabled = false;						if(loaderInfo.parameters.show_video_source) {				broadcaster.publisher.cameraName = loaderInfo.parameters.show_video_source; 			}						if(loaderInfo.parameters.show_audio_source) {				broadcaster.publisher.microphoneName = loaderInfo.parameters.show_audio_source;			}						broadcaster.publisher.videoQualityPercent = videoquality_sld.value;			broadcaster.publisher.audioQualityPercent = audioquality_sld.value;			broadcaster.publisher.videoEnabled = enablevideo_cb.selected;			broadcaster.publisher.audioEnabled = enableaudio_cb.selected;			broadcaster.publisher.volume = volume_sld.value;			broadcaster.publisher.fpsPercent = fps_sld.value;			broadcaster.soundmixer = enablesoundmixer_cb.selected;									//		}						private function onAddCohostRequest(e:DynamicEvent)		{			updateInfo("onAddCohostRequest");			//trace(e.clientId)			//Debug.explore(e.request)			//updateInfo("id: "+e);						//When a cohost request arrives from a viewer we autmatically accept it			//			broadcaster.modules.cohost.accept(e.clientId)			//We update the actual cohostrequest			//		broadcaster.modules.layers.dataProvider.updateItemAtProperty("nodeId", e.clientId, { hasPreview:true, x:100, y:120, onAir:true } )		}				private function onCreateCohost(e:Event)		{			//updateInfo("onCreateCohost");			//The class reference of the Cohost container			//broadcaster.modules.cohost.container = LayerEditor			//We listen to the event when a user wants to cohost			broadcaster.modules.cohost.addEventListener("addRequest", onAddCohostRequest);			//Start the cohost module, this will make the "cohost bar" appear in viewers			// broadcaster.modules.cohost.start();			//Listen to the custom event when an existing viewer cohost wants to remove itself			//broadcaster.display.addEventListener("removeLayer",onRemoveLayer)		}				private function onCreateModules( e:Event ) {			//updateInfo("onCreateModules");			//broadcaster.modules.cohost.addEventListener( "request", onCohostRequest, false, 0, true );			broadcaster.modules.addEventListener("createCohost", onCreateCohost)		}				private function onCreatePublisher( e:Event ) {			trace( "[broadcaster] - onCreatePublisher() :: " )															broadcaster.publisher.addEventListener( "cameraNames", 		onCameraNames, false, 0, true );			broadcaster.publisher.addEventListener( "cameraName", 		onCameraName, false, 0, true );			broadcaster.publisher.addEventListener( "microphoneNames", 	onMicrophoneNames, false, 0, true );			broadcaster.publisher.addEventListener( "microphoneName", 	onMicrophoneName, false, 0, true )	;			broadcaster.publisher.addEventListener( "activityLevelAvailable", onActivityLevelAvailable , false, 0, true );						enablevideo_cb.enabled = true;			enableaudio_cb.enabled = true;						enablevideo_cb.selected = (loaderInfo.parameters.show_video_enabled) ? getBoolean(loaderInfo.parameters.show_video_enabled) : true;			enableaudio_cb.selected = (loaderInfo.parameters.show_audio_enabled) ? getBoolean(loaderInfo.parameters.show_audio_enabled) : true;						audioquality_sld.enabled = broadcaster.publisher.canSetQuality;			videoquality_sld.enabled = broadcaster.publisher.canSetQuality;						audioquality_sld.value = (loaderInfo.parameters.show_audio_quality) ? loaderInfo.parameters.show_audio_quality : 1;			videoquality_sld.value = (loaderInfo.parameters.show_video_quality) ? loaderInfo.parameters.show_video_quality : 1;									volume_sld.enabled = broadcaster.publisher.canSetVolume	;			volume_sld.value = (loaderInfo.parameters.show_volume) ? loaderInfo.parameters.show_volume : 1;						fps_sld.enabled				= true;			fps_sld.value = (loaderInfo.parameters.show_fps) ? loaderInfo.parameters.show_fps : 1;						enablesmoothing_cb.enabled	= true;			enablesmoothing_cb.selected = (loaderInfo.parameters.show_smoothing) ? getBoolean(loaderInfo.parameters.show_smoothing) : true;						enablesoundmixer_cb.enabled	= true;			enablesoundmixer_cb.selected = (loaderInfo.parameters.show_soundmixer) ? getBoolean(loaderInfo.parameters.show_soundmixer) : true;								}				private function onRejected(e:Event) {			debug_txt.text += "onRejected: " + e.toString()+"\n";			updateInfo("Connection Rejected by server");		}				private function onSessionError(e:Event) {			debug_txt.text += "onSessionError: " + e+"\n";			//updateInfo("onSessionError: "+e.);		}				private function onBroadcasterMessage(e:Event) {			debug_txt.text += "onbroadcasterMessage: " + e+"\n";		}				private function onAlreadyOnline(e:Event) {			// broadcaster.allowOverride(true);			debug_txt.text += "onAlreadyOnline: " + e+"\n";			updateInfo("Already Online");			updateInfo("Please close other window and refresh page");		}				private function onConnectFailed(e:Event) {			debug_txt.text += "onConnectFailed: " + e+"\n";			updateInfo("Failed to connect");		}				/////////////////////////////////////////////////////////////////////////		//////////////////// Publisher handlers ///////////////////////////////		/////////////////////////////////////////////////////////////////////////				private function onCameraNames( e:Event ){			cameraNames = new DataProvider( broadcaster.publisher.cameraNames );			videosource_cb.enabled = true;			videosource_cb.dataProvider = cameraNames;								}				private function onMicrophoneNames( e:Event ){			microphoneNames = new DataProvider( broadcaster.publisher.microphoneNames );			audiosource_cb.enabled = true;			audiosource_cb.dataProvider = microphoneNames;		}				private function onCameraName( e:Event ){			for( var i:int = 0; i < cameraNames.length; i ++ )	{				var camera:Object = cameraNames.getItemAt( i );								if( camera.label == broadcaster.publisher.cameraName )	{					videosource_cb.selectedItem = camera;				}							}			}				private function onMicrophoneName( e:Event ){			for( var j:int = 0; j < microphoneNames.length; j ++ ) 	{				var microphone:Object = microphoneNames.getItemAt( j );								if( microphone.label == broadcaster.publisher.microphoneName )	{					audiosource_cb.selectedItem = microphone;				}			}				}				private function onActivityLevelAvailable(e:Event) {			activityLevel_pbar.maximum = 100			activityLevel_pbar.minimum = 0			activityLevel_pbar.value = 0						if ((activityLevel_pbar.visible = broadcaster.publisher.activityLevelAvailable)) 			activityLevel_pbar.addEventListener(Event.ENTER_FRAME,showActivityLevelEnterFrame);			else 			activityLevel_pbar.removeEventListener(Event.ENTER_FRAME,showActivityLevelEnterFrame);		}				private function showActivityLevelEnterFrame(e:Event) {			if(broadcaster.publisher)  activityLevel_pbar.value = broadcaster.publisher.activityLevel;		}				//////////////////////////////////////////////////////////////////////////// 		/////////////////// Stage - action handlers ///////////////////////////////		////////////////////////////////////////////////////////////////////////// 				private function changeVideoSource( e:Event )	{			//updateInfo("Video Source is now: "+videosource_cb.selectedLabel.toString());			trace( "[broadcaster] - changeVideoSource() :: " );			broadcaster.publisher.cameraName = videosource_cb.selectedLabel;			saveShowSetting("show_video_source",videosource_cb.selectedLabel.toString());		}				private function changeAudioSource( e:Event )	{			trace( "[broadcaster] - changeAudioSource() :: " );			broadcaster.publisher.microphoneName = audiosource_cb.selectedLabel	;			saveShowSetting("show_audio_source",audiosource_cb.selectedLabel.toString());		}				private function changeVideoQuality( e:Event )	{			trace( "[broadcaster] - changeVideoQuality() :: "  );			broadcaster.publisher.videoQualityPercent = videoquality_sld.value;			updateInfo("Changed Video Quality to: "+(videoquality_sld.value	*100)+"%");			saveShowSetting("show_video_quality",videoquality_sld.value.toString());					}				private function changeAudioQuality( e:Event )	{			trace( "[broadcaster] - changeAudioQuality() :: "  );			broadcaster.publisher.audioQualityPercent = audioquality_sld.value	;			updateInfo("Changed Audio Quality to: "+(audioquality_sld.value	*100)+"%");			saveShowSetting("show_audio_quality",audioquality_sld.value.toString());					}				private function changeVolume( e:Event )	{			debug_txt.text += "cohost.data: " + broadcaster.modules.cohost.data+"\n";						trace( "[broadcaster] - changeVolume() :: "  );			broadcaster.publisher.volume = volume_sld.value;			saveShowSetting("show_volume",volume_sld.value.toString());		}				private function toggleVideoBroadcast( e:Event ) {			trace( "[broadcaster] - toggleVideoBroadcast() :: "  );			//used to be videoBroadcastEnabled, wtf?			broadcaster.publisher.videoEnabled = enablevideo_cb.selected;			//updateInfo("Video enabled? "+enablevideo_cb.selected.toString());			saveShowSetting("show_video_enabled",enablevideo_cb.selected.toString());		}				private function toggleAudioBroadcast( e:Event ) {			trace( "[broadcaster] - toggleAudioBroadcast() :: "  );			//use to be audioBroadcastEnabled 	audioEnabled			broadcaster.publisher.audioEnabled = enableaudio_cb.selected;			saveShowSetting("show_audio_enabled",enableaudio_cb.selected.toString());		}				private function onBroadcastClick( e:MouseEvent ) {			trace( "[broadcaster] - onBroadcastClick()" )			if( broadcast_btn.selected ) {		//start bc				broadcast_btn.label = "Stop broadcast";				broadcaster.publisher.startBroadcast();				updateInfo("Broadcast started");								//Start timer				timerCont = new Timer(askSec*1000);				timerCont.addEventListener(TimerEvent.TIMER_COMPLETE, timerHandler);				timerCont.start();						} else {							//end bc				//Stop timers				timerTimeout.stop();					timerCont.stop();				continue_btn.visible = false;								broadcast_btn.label = "Start broadcast"				broadcaster.publisher.stopBroadcast()	;				updateInfo("Broadcast stopped");							}		}				private function onContinueClick( e:MouseEvent ) {			timerTimeout.stop();			continue_btn.visible = false;		}						private function changeFPS( e:Event )	{			broadcaster.publisher.fpsPercent = fps_sld.value;			updateInfo("Frames per second: "+broadcaster.publisher.fpsValue);			//updateInfo("fps%: "+broadcaster.publisher.fpsPercent);			saveShowSetting("show_fps",fps_sld.value.toString());					}						private function toggleSmoothing( e:Event ) {			//updateInfo("Soundmixer enabled?: "+enablesoundmixer_cb.selected);			//broadcaster.soundmixer = enablesoundmixer_cb.selected;			saveShowSetting("show_smoothing",enablesmoothing_cb.selected.toString());		}				private function toggleSoundMixer( e:Event ) {			//updateInfo("Soundmixer enabled?: "+enablesoundmixer_cb.selected);			broadcaster.soundmixer = enablesoundmixer_cb.selected;			saveShowSetting("show_soundmixer",enablesoundmixer_cb.selected.toString());		}						private function onClickAdvOpts( e:MouseEvent) {			//stage.align = StageAlign.TOP_LEFT;						//stage.stageHeight += 100;			if(advOptionOn === true) {				ExternalInterface.call("adjustFlashPaneHeight", -200);				advOptionOn = false;			} else {				ExternalInterface.call("adjustFlashPaneHeight", 200);				advOptionOn = true;			}					}						private function onClickCoHost(e:MouseEvent) {			if(coHostStage == 0) {				//cohost				broadcaster.modules.cohost.start();  //test cohost				coHostStage=1;				cohost_btn.label = "Invites Sent!";			}					}						//////////////////////////////////////////////////////////////////////////// 		///////////////////// Info box //////////// ///////////////////////////////		////////////////////////////////////////////////////////////////////////// 				private function updateInfo(msg:String) {			infoXML.insertChildBefore(infoXML.node[0], "<node label='"+msg+"' />" );			info_tree.dataProvider = new TreeDataProvider(infoXML);		}						////////////////////////		// Save settings		/////////////////////////		private function saveShowSetting(index:String, val:String) : void {			var variables : URLVariables = new URLVariables();  			variables.index		= index;  			variables.val 	 	= val;  						variables.channelId 	 	= channelId;  			variables.sessionId 	 	= sessionId;  						gURLObj.sendData(saveShowURL, variables);				}						//end show		public function endShow() : void {			var urlRequest:URLRequest=new URLRequest(endShowOverlayURL);			var imageLoader:Loader = new Loader();			imageLoader.load(urlRequest);			imageLoader.x=0;			imageLoader.y=0;						addChild(imageLoader);			setChildIndex(imageLoader,numChildren - 1);						//hit stop			//TODO can we just simulate a button click instead			timerTimeout.stop();				timerCont.stop();			continue_btn.visible = false;						broadcast_btn.label = "Start broadcast";			broadcaster.publisher.stopBroadcast();			updateInfo("Broadcast stopped");			broadcast_btn.enabled = false;		}												///////////////// UTILS//////////////		private function getBoolean(str:String):Boolean {			switch(str) {     				case "1":     				case "true":     				case "yes":         					return true;     				case "0":     				case "false":     				case "no":         					return false;     				default:         					return Boolean(str); 			}		}									private function autoStartBroadcast(...e) 		{			//When the publisher and the required modules are ready we start broadcasting automatically			//			if (broadcaster.publisher && broadcaster.modules && broadcaster.modules.broadcaster)			{				//You may want to bind this onto a button click				broadcaster.publisher.startBroadcast()			}		}										/*		private function onCreateModules(...e) 		{			//When the broadcaster module is ready we call autoStartBroadcast			broadcaster.modules.addEventListener('createBroadcaster', autoStartBroadcast)			//Need to make sure we start cohost operation only when the module gets available			broadcaster.modules.addEventListener('createCohost', onCreateCohost)		}										private function onCreateCohost(...e) 		{			//The class reference of the Cohost container			broadcaster.modules.cohost.container = LayerEditor			//We listen to the event when a user wants to cohost			broadcaster.modules.cohost.addEventListener('addRequest', onAddCohostRequest)			//Start the cohost module, this will make the "cohost bar" appear in viewers			broadcaster.modules.cohost.start()			//Listen to the custom event when an existing viewer cohost wants to remove itself			broadcaster.display.addEventListener('removeLayer',onRemoveLayer)		}				private function onRemoveLayer(e:Event) 		{			//To remove a layer from the layermanager use the removeItemAtProperty.			broadcaster.modules.layers.dataProvider.removeItemAtProperty('nodeId', e.target.name)		}				private function onAddCohostRequest(e:DynamicEvent) 		{			trace(e.clientId)			Debug.explore(e.request)			//When a cohost request arrives from a viewer we autmatically accept it			broadcaster.modules.cohost.accept(e.clientId)			//We update the actual cohostrequest			broadcaster.modules.layers.dataProvider.updateItemAtProperty('nodeId', e.clientId, { hasPreview:true, x:100, y:120, onAir:true } )		}		*/	}}